{"version":3,"sources":["facetracking/pico.js"],"names":["pico","unpack_cascade","bytes","dview","DataView","ArrayBuffer","p","setUint8","tdepth","getInt32","ntrees","tcodes_ls","tpreds_ls","thresh_ls","t","Array","prototype","push","apply","slice","Math","pow","i","getFloat32","tcodes","Int8Array","tpreds","Float32Array","thresh","classify_region","r","c","s","pixels","ldim","root","o","pow2tdepth","idx","j","run_cascade","image","params","nrows","ncols","shiftfactor","minsize","maxsize","scalefactor","scale","detections","step","max","offset","q","cluster_detections","dets","iouthreshold","sort","a","b","calculate_iou","det1","det2","r1","c1","s1","r2","c2","s2","overr","min","overc","assignments","length","fill","clusters","n","instantiate_detection_memory","size","memory","update_memory","concat"],"mappings":"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","file":"pico.532928f4.js","sourceRoot":"../src","sourcesContent":["/* This library is released under the MIT license, see https://github.com/tehnokv/picojs */\npico = {}\n\npico.unpack_cascade = function(bytes)\n{\n\t//\n\tconst dview = new DataView(new ArrayBuffer(4));\n\t/*\n\t\twe skip the first 8 bytes of the cascade file\n\t\t(cascade version number and some data used during the learning process)\n\t*/\n\tlet p = 8;\n\t/*\n\t\tread the depth (size) of each tree first: a 32-bit signed integer\n\t*/\n\tdview.setUint8(0, bytes[p+0]), dview.setUint8(1, bytes[p+1]), dview.setUint8(2, bytes[p+2]), dview.setUint8(3, bytes[p+3]);\n\tconst tdepth = dview.getInt32(0, true);\n\tp = p + 4\n\t/*\n\t\tnext, read the number of trees in the cascade: another 32-bit signed integer\n\t*/\n\tdview.setUint8(0, bytes[p+0]), dview.setUint8(1, bytes[p+1]), dview.setUint8(2, bytes[p+2]), dview.setUint8(3, bytes[p+3]);\n\tconst ntrees = dview.getInt32(0, true);\n\tp = p + 4\n\t/*\n\t\tread the actual trees and cascade thresholds\n\t*/\n\tconst tcodes_ls = [];\n\tconst tpreds_ls = [];\n\tconst thresh_ls = [];\n\tfor(let t=0; t<ntrees; ++t)\n\t{\n\t\t// read the binary tests placed in internal tree nodes\n\t\tArray.prototype.push.apply(tcodes_ls, [0, 0, 0, 0]);\n\t\tArray.prototype.push.apply(tcodes_ls, bytes.slice(p, p+4*Math.pow(2, tdepth)-4));\n\t\tp = p + 4*Math.pow(2, tdepth)-4;\n\t\t// read the prediction in the leaf nodes of the tree\n\t\tfor(let i=0; i<Math.pow(2, tdepth); ++i)\n\t\t{\n\t\t\tdview.setUint8(0, bytes[p+0]), dview.setUint8(1, bytes[p+1]), dview.setUint8(2, bytes[p+2]), dview.setUint8(3, bytes[p+3]);\n\t\t\ttpreds_ls.push(dview.getFloat32(0, true));\n\t\t\tp = p + 4;\n\t\t}\n\t\t// read the threshold\n\t\tdview.setUint8(0, bytes[p+0]), dview.setUint8(1, bytes[p+1]), dview.setUint8(2, bytes[p+2]), dview.setUint8(3, bytes[p+3]);\n\t\tthresh_ls.push(dview.getFloat32(0, true));\n\t\tp = p + 4;\n\t}\n\tconst tcodes = new Int8Array(tcodes_ls);\n\tconst tpreds = new Float32Array(tpreds_ls);\n\tconst thresh = new Float32Array(thresh_ls);\n\t/*\n\t\tconstruct the classification function from the read data\n\t*/\n\tfunction classify_region(r, c, s, pixels, ldim)\n\t{\n\t\t r = 256*r;\n\t\t c = 256*c;\n\t\t let root = 0;\n\t\t let o = 0.0;\n\t\t const pow2tdepth = Math.pow(2, tdepth) >> 0; // '>>0' transforms this number to int\n\n\t\t for(let i=0; i<ntrees; ++i)\n\t\t {\n\t\t\tidx = 1;\n\t\t\tfor(let j=0; j<tdepth; ++j)\n\t\t\t\t// we use '>> 8' here to perform an integer division: this seems important for performance\n\t\t\t\tidx = 2*idx + (pixels[((r+tcodes[root + 4*idx + 0]*s) >> 8)*ldim+((c+tcodes[root + 4*idx + 1]*s) >> 8)]<=pixels[((r+tcodes[root + 4*idx + 2]*s) >> 8)*ldim+((c+tcodes[root + 4*idx + 3]*s) >> 8)]);\n\n\t\t\t o = o + tpreds[pow2tdepth*i + idx-pow2tdepth];\n\n\t\t\t if(o<=thresh[i])\n\t\t\t\t return -1;\n\n\t\t\t root += 4*pow2tdepth;\n\t\t}\n\t\treturn o - thresh[ntrees-1];\n\t}\n\t/*\n\t\twe're done\n\t*/\n\treturn classify_region;\n}\n\npico.run_cascade = function(image, classify_region, params)\n{\n\tconst pixels = image.pixels;\n\tconst nrows = image.nrows;\n\tconst ncols = image.ncols;\n\tconst ldim = image.ldim;\n\n\tconst shiftfactor = params.shiftfactor;\n\tconst minsize = params.minsize;\n\tconst maxsize = params.maxsize;\n\tconst scalefactor = params.scalefactor;\n\n\tlet scale = minsize;\n\tconst detections = [];\n\n\twhile(scale<=maxsize)\n\t{\n\t\tconst step = Math.max(shiftfactor*scale, 1) >> 0; // '>>0' transforms this number to int\n\t\tconst offset = (scale/2 + 1) >> 0;\n\n\t\tfor(let r=offset; r<=nrows-offset; r+=step)\n\t\t\tfor(let c=offset; c<=ncols-offset; c+=step)\n\t\t\t{\n\t\t\t\tconst q = classify_region(r, c, scale, pixels, ldim);\n\t\t\t\tif (q > 0.0)\n\t\t\t\t\tdetections.push([r, c, scale, q]);\n\t\t\t}\n\t\t\n\t\tscale = scale*scalefactor;\n\t}\n\n    return detections;\n}\n\npico.cluster_detections = function(dets, iouthreshold)\n{\n\t/*\n\t\tsort detections by their score\n\t*/\n\tdets = dets.sort(function(a, b) {\n\t\treturn b[3] - a[3];\n\t});\n\t/*\n\t\tthis helper function calculates the intersection over union for two detections\n\t*/\n\tfunction calculate_iou(det1, det2)\n\t{\n\t\t// unpack the position and size of each detection\n\t\tconst r1=det1[0], c1=det1[1], s1=det1[2];\n\t\tconst r2=det2[0], c2=det2[1], s2=det2[2];\n\t\t// calculate detection overlap in each dimension\n\t\tconst overr = Math.max(0, Math.min(r1+s1/2, r2+s2/2) - Math.max(r1-s1/2, r2-s2/2));\n\t\tconst overc = Math.max(0, Math.min(c1+s1/2, c2+s2/2) - Math.max(c1-s1/2, c2-s2/2));\n\t\t// calculate and return IoU\n\t\treturn overr*overc/(s1*s1+s2*s2-overr*overc);\n\t}\n\t/*\n\t\tdo clustering through non-maximum suppression\n\t*/\n\tconst assignments = new Array(dets.length).fill(0);\n\tconst clusters = [];\n\tfor(let i=0; i<dets.length; ++i)\n\t{\n\t\t// is this detection assigned to a cluster?\n\t\tif(assignments[i]==0)\n\t\t{\n\t\t\t// it is not:\n\t\t\t// now we make a cluster out of it and see whether some other detections belong to it\n\t\t\tlet r=0.0, c=0.0, s=0.0, q=0.0, n=0;\n\t\t\tfor(let j=i; j<dets.length; ++j)\n\t\t\t\tif(calculate_iou(dets[i], dets[j])>iouthreshold)\n\t\t\t\t{\n\t\t\t\t\tassignments[j] = 1;\n\t\t\t\t\tr = r + dets[j][0];\n\t\t\t\t\tc = c + dets[j][1];\n\t\t\t\t\ts = s + dets[j][2];\n\t\t\t\t\tq = q + dets[j][3];\n\t\t\t\t\tn = n + 1;\n\t\t\t\t}\n\t\t\t// make a cluster representative\n\t\t\tclusters.push([r/n, c/n, s/n, q]);\n\t\t}\n\t}\n\n\treturn clusters;\n}\n\npico.instantiate_detection_memory = function(size)\n{\n\t/*\n\t\tinitialize a circular buffer of `size` elements\n\t*/\n\tlet n = 0;\n\tconst memory = [];\n\tfor(let i=0; i<size; ++i)\n\t\tmemory.push([]);\n\t/*\n\t\tbuild a function that:\n\t\t(1) inserts the current frame's detections into the buffer;\n\t\t(2) merges all detections from the last `size` frames and returns them\n\t*/\n\tfunction update_memory(dets)\n\t{\n\t\tmemory[n] = dets;\n\t\tn = (n+1)%memory.length;\n\t\tdets = [];\n\t\tfor(i=0; i<memory.length; ++i)\n\t\t\tdets = dets.concat(memory[i]);\n\t\t//\n\t\treturn dets;\n\t}\n\t/*\n\t\twe're done\n\t*/\n\treturn update_memory;\n}"]}